lexer grammar NyarOperators;
// $antlr-format useTab false ;reflowComments false;
// $antlr-format alignColons trailing;
// Brackets Pair
LS     : '(';
RS     : ')';
LM     : '[';
RM     : ']';
LL     : '{';
RL     : '}';
LCeil  : '\u2308'; //U+02308 ‚åà
RCeil  : '\u2309'; //U+02309 ‚åâ
LFloor : '\u230A'; //U+0230A ‚åä
RFloor : '\u230B'; //U+0230B ‚åã
LAngle : '<|' | '\u27E8'; //U+027E8 ‚ü®
RAngle : '|>' | '\u27E9'; //U+027E9 ‚ü©
LQuote : '\u201C'; //U+2018 ‚Äò U+201C ‚Äú
RQuote : '\u201D'; //U+2019 ‚Äô U+201D ‚Äù

/* <> */
Import      : '<<<' | '\u22D8'; //U+22D8 ‚ãò
LeftShift   : '<<' | '\u226A'; //U+226A ‚â™
LessEqual   : '<=';
Less        : '<';
Export      : '>>>' | '\u22D9'; //U+22D9 ‚ãô
RightShift  : '>>' | '\u226B'; //U+226B ‚â´
GraterEqual : '>=';
Grater      : '>';

/* +-√∑ */
Increase      : '++';
PlusTo        : '+=';
Plus          : '+';
LogicXor      : '\u2295'; //U+2295 ‚äï
Decrease      : '--';
MinusFrom     : '-=';
To            : '->' | '\u2192'; //U+2192 ‚Üí
Minus         : '-';
NullSequence  : '***';
Sequence      : '**';
Times         : '*';
Multiply      : '\u00D7'; //U+00D7 √ó
Kronecker     : '\u2297'; //U+2297 ‚äó
TensorProduct : '\u2299'; //U+2299 ‚äô
MapAll        : '//@';
Remainder     : '//';
Map           : '/@';
Divide        : '/';
Quotient      : '\u00F7'; //U+00F7 √∑
Comment       : '%%%';
Output        : '%%';
Mod           : '%';

/* ^‚àö */
BaseInput : '^^';
Power     : '^';
Surd      : '\u221A'; //U+221A ‚àö

/* =~ */
Equivalent    : '===';
NotEquivalent : '=!=';
Equal         : '=='; //‚â°
Infer         : '=>' | '\u27F9'; //U+27F9 ‚üπ
Assign        : '=';
Concat        : '~~';
Destruct      : '~=';
Tilde         : '~';

/* |&! */
LogicOr    : '||' | '\u2227'; //U+2227 ‚àß
BitOr      : '|';
LogicAnd   : '&&' | '\u2228'; //U+2228 ‚à®
BitAnd     : '&';
DoubleBang : '!!';
NotEqual   : '!=' | '\u2260'; //U+2260 ‚â†
BitNot     : '!' | '\uFF01'; //U+FF01 ÔºÅ
LogicNot   : DoubleBang | '\u00AC'; //U+00AC ¬¨
Shebang    : '#!';

/* $ @ */
PostfixFunction : '$';
Curry           : '@@@';
Apply           : '@@';
LetAssign       : '@=';
At              : '@';

/* :; */
TypeAnnotation : '::' | '\u2237'; //U+2237 ‚à∑
DelayedAssign  : ':=' | '\u2254'; //U+2254 ‚âî
Colon          : ':' | '\uFF1A'; //U+FF1A Ôºö
Semicolon      : ';' | '\uFF1B'; //U+FF1B Ôºõ

/* upper */
Quote           : '`';
Acute           : '\u00B4'; // U+00B4 ¬¥
DoubleQuotation : '"';
Quotation       : '\'';

/* lower */
Underline   : '_';
Ellipsis    : '...'; //‚Ä¶
FinalAssign : '.=' | '\u2250'; //U+2250 ‚âê
DOT         : '.' | '\u3002'; //U+3002 „ÄÇ
Dot         : '\u22C5'; //U+22C5 ‚ãÖ
COMMA       : ',' | '\uFF0C'; //U+FF0C Ôºå

/* Prefix */
Reciprocal : '\u215F'; //U+215F ‚Öü

/* Postfix */
Degree    : '\u00B0'; //U+00B0 ¬∞
Transpose : '\u1D40'; //U+1D40 ·µÄ
Hermitian : '\u1D34'; //U+1D34 ·¥¥

/* TypeLiteral */
FieldComplex  : '\u2102'; //U+2102 ‚ÑÇ
FieldReal     : '\u211D'; //U+211D ‚Ñù
FieldUnsigned : '\u2124'; //U+2124 ‚Ñ§
FieldBool     : '\u{1D539}'; // U+1D539 ùîπ
FieldInteger  : '\u{1D540}'; // U+1D540 ùïÄ
FieldString   : '\u{1D54A}'; // U+1D54A ùïä

/* Other */
Section  : '\u00A7'; //U+00A7 ¬ß
Pilcrow  : '\u00B6'; //U+00B6 ¬∂
Currency : '\u00A4'; //U+00A4 ¬§
Element  : '\u2208'; //U+2208 ‚àà
